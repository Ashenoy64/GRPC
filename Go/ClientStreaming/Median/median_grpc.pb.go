// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: median.proto

package Median

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FindMedianService_GetMedian_FullMethodName = "/median.FindMedianService/get_median"
)

// FindMedianServiceClient is the client API for FindMedianService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FindMedianServiceClient interface {
	GetMedian(ctx context.Context, opts ...grpc.CallOption) (FindMedianService_GetMedianClient, error)
}

type findMedianServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFindMedianServiceClient(cc grpc.ClientConnInterface) FindMedianServiceClient {
	return &findMedianServiceClient{cc}
}

func (c *findMedianServiceClient) GetMedian(ctx context.Context, opts ...grpc.CallOption) (FindMedianService_GetMedianClient, error) {
	stream, err := c.cc.NewStream(ctx, &FindMedianService_ServiceDesc.Streams[0], FindMedianService_GetMedian_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &findMedianServiceGetMedianClient{stream}
	return x, nil
}

type FindMedianService_GetMedianClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type findMedianServiceGetMedianClient struct {
	grpc.ClientStream
}

func (x *findMedianServiceGetMedianClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *findMedianServiceGetMedianClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FindMedianServiceServer is the server API for FindMedianService service.
// All implementations must embed UnimplementedFindMedianServiceServer
// for forward compatibility
type FindMedianServiceServer interface {
	GetMedian(FindMedianService_GetMedianServer) error
	mustEmbedUnimplementedFindMedianServiceServer()
}

// UnimplementedFindMedianServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFindMedianServiceServer struct {
}

func (UnimplementedFindMedianServiceServer) GetMedian(FindMedianService_GetMedianServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMedian not implemented")
}
func (UnimplementedFindMedianServiceServer) mustEmbedUnimplementedFindMedianServiceServer() {}

// UnsafeFindMedianServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FindMedianServiceServer will
// result in compilation errors.
type UnsafeFindMedianServiceServer interface {
	mustEmbedUnimplementedFindMedianServiceServer()
}

func RegisterFindMedianServiceServer(s grpc.ServiceRegistrar, srv FindMedianServiceServer) {
	s.RegisterService(&FindMedianService_ServiceDesc, srv)
}

func _FindMedianService_GetMedian_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FindMedianServiceServer).GetMedian(&findMedianServiceGetMedianServer{stream})
}

type FindMedianService_GetMedianServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type findMedianServiceGetMedianServer struct {
	grpc.ServerStream
}

func (x *findMedianServiceGetMedianServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *findMedianServiceGetMedianServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FindMedianService_ServiceDesc is the grpc.ServiceDesc for FindMedianService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FindMedianService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "median.FindMedianService",
	HandlerType: (*FindMedianServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "get_median",
			Handler:       _FindMedianService_GetMedian_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "median.proto",
}
